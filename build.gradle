// https://github.com/kulya/jmeter-gradle-plugin
apply plugin: 'jmeter'
apply plugin: 'java'
apply plugin: 'groovy'

buildscript {
    ext {
        pluginsVersion = "1.2.1"
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "com.github.kulya:jmeter-gradle-plugin:1.3.4-2.13"
        classpath "org.codehaus.groovy:groovy-all:2.4.3"
        classpath "com.opencsv:opencsv:3.3"
        classpath "com.google.guava:guava:18.0"
        classpath "org.apache.commons:commons-lang3:3.4"
        classpath group: 'kg.apc', name: 'jmeter-plugins-standard', version: pluginsVersion
        classpath group: 'kg.apc', name: 'jmeter-plugins-common', version: pluginsVersion
        classpath group: 'kg.apc', name: 'jmeter-plugins-extras', version: pluginsVersion
        classpath group: 'kg.apc', name: 'jmeter-plugins-extras-libs', version: pluginsVersion
        classpath group: 'kg.apc', name: 'jmeter-plugins-webdriver', version: pluginsVersion
    }
    configurations.classpath.exclude group: 'commons-math3', module: 'commons-math3'
    configurations.classpath.exclude group: 'commons-pool2', module: 'commons-pool2'
}

jmeterRun.configure {
    doFirst {
        if ( project.hasProperty('env') ) {
            def envName = project.property('env')
            println "Configuring for environment:" + envName
            jmeterUserPropertiesFiles = [file("src/test/jmeter/project-properties/" + envName + ".properties"),file("src/test/jmeter/user.properties")]
        } else {
            jmeterUserPropertiesFiles = null
            throw new IllegalArgumentException("Missing required script argument 'env'...")
        }
        // if ( project.hasProperty('userThreads') )
        // {
        //     String ut = project.property('userThreads')
        //     println "Value for 'userThreads' is " + ut
        // } else  {
        //     throw new IllegalArgumentException("Missing required script argument 'userThreads'...")
        // }
    }
    enableReports = true
    jmeterIgnoreFailure = false
    jmeterIgnoreError = false
}

jmeterEditor.configure {
    maxHeapSize = "1200M"
    jmeterPluginJars = ["groovy","guava","opencsv","jmeter-plugins-standard","commons-lang3",
        "jmeter-plugins-common","jmeter-plugins-extras","jmeter-plugins-extras-libs",
        "jmeter-plugins-webdriver"]
    jmeterUserPropertiesFiles = [file("src/test/jmeter/user.properties")]
}

task printBuildScriptClasspath << {
    println "\nLoading the following jmeter classpath jars..."
    project.buildscript.configurations.classpath.each {
        String jarName = it.getName();
        print jarName + ":"
    }
    println "\n"
}
